name: CI/CD - Markify

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker compose -f docker-compose.yml build

      - name: Push Docker image
        run: |
          docker compose push

      # ---------------------------------------
      # STEP 1: Create the GitHub Deployment
      # ---------------------------------------
      - name: Create GitHub Deployment for Production
        id: create_deployment
        run: |
          # Call GitHub's Deployments API
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"ref":"main","environment":"production"}' \
            https://api.github.com/repos/${{ github.repository }}/deployments)
          
          # Extract the 'id' field from the JSON response
          DEPLOYMENT_ID=$(echo "$RESPONSE" | jq -r '.id')

          echo "GitHub API response:"
          echo "$RESPONSE"

          # Pass the deployment_id to the next steps
          # Using the new environment file approach (recommended),
          # or you can still use ::set-output if needed
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      # Deploy to VPS using SSH with Password
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            # Navigate to the directory where the Markify app is located
            cd /root/CICD/Markify
            # Pull the latest changes and run the application
            docker compose pull
            docker compose up -d

      # ---------------------------------------
      # STEP 2: Create a "success" Deployment Status
      # ---------------------------------------
      - name: Set Deployment Status as Success
        run: |
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"state":"success"}' \
            https://api.github.com/repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.deployment_id }}/statuses
