name: CI/CD - Markify

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker compose -f docker-compose.yml build

      - name: Push Docker image
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker compose push

      # ---------------------------------------
      # STEP 1: Wait for Status Checks
      # ---------------------------------------
      - name: Wait for Required Status Checks to Complete
        uses: actions/github-script@v6
        with:
          script: |
            const { data: statuses } = await github.repos.listCommitStatusesForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
            });
            
            const requiredContexts = ["build"]; // Ubah sesuai status checks yang dibutuhkan
            let allSuccess = false;
            const maxRetries = 20; // Jumlah maksimum percobaan
            let retries = 0;

            while (!allSuccess && retries < maxRetries) {
              console.log("Checking statuses...");
              allSuccess = requiredContexts.every((context) =>
                statuses.some((status) => status.context === context && status.state === "success")
              );
              if (!allSuccess) {
                console.log("Required statuses are not yet successful. Retrying in 10 seconds...");
                await new Promise((resolve) => setTimeout(resolve, 10000)); // Tunggu 10 detik
                retries++;
              }
            }

            if (!allSuccess) {
              throw new Error("Required statuses did not succeed in time.");
            }
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---------------------------------------
      # STEP 2: Create the GitHub Deployment
      # ---------------------------------------
      - name: Create GitHub Deployment for Production
        id: create_deployment
        run: |
          echo "Creating GitHub deployment for production..."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d '{"ref":"main","environment":"production","required_contexts":[]}' \
            https://api.github.com/repos/${{ github.repository }}/deployments)
          
          echo "GitHub API Response:"
          echo "$RESPONSE"

          # Extract the 'id' field from the JSON response
          DEPLOYMENT_ID=$(echo "$RESPONSE" | jq -r '.id')

          if [ "$DEPLOYMENT_ID" == "null" ] || [ -z "$DEPLOYMENT_ID" ]; then
            echo "Failed to create deployment. Response from GitHub API:"
            echo "$RESPONSE"
            exit 1
          fi

          echo "Deployment ID: $DEPLOYMENT_ID"

          # Pass the deployment_id to the next steps
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      # Deploy to VPS using SSH with Password
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            echo "Deploying application to VPS..."
            cd /root/CICD/Markify
            echo "Pulling latest Docker images..."
            docker compose pull
            echo "Starting the application using Docker Compose..."
            docker compose up -d

      # ---------------------------------------
      # STEP 3: Create a "success" Deployment Status
      # ---------------------------------------
      - name: Set Deployment Status as Success
        run: |
          echo "Setting deployment status to 'success'..."
          DEPLOYMENT_ID=${{ steps.create_deployment.outputs.deployment_id }}

          if [ -z "$DEPLOYMENT_ID" ]; then
            echo "Deployment ID not found. Cannot update deployment status."
            exit 1
          fi

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d '{"state":"success", "description":"Deployment successful", "environment":"production"}' \
            https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses)

          echo "GitHub API Response for setting status:"
          echo "$RESPONSE"

          if echo "$RESPONSE" | grep -q '"state": "success"'; then
            echo "Deployment status successfully set to 'success'."
          else
            echo "Failed to set deployment status. Response from GitHub API:"
            echo "$RESPONSE"
            exit 1
          fi
